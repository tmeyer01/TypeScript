{"mappings":"AAEA,uBAAuB;AAEvB,kBAAkB;AAClB,0BAA0B;AAC1B,gCAAgC;AAEhC,IAAI;AAEJ,sBAAsB;AACtB,kBAAkB;AAClB,mBAAmB;AAGnB,yEAAyE;AACzE,6DAA6D;AAE7D,+CAA+C;AAC/C,wBAAwB;AACxB,0BAA0B;AAC1B,MAAM;AAEN,cAAc;AACd,kCAAkC;AAClC,MAAM;AAEN,IAAI;AAEJ,oDAAoD;AACpD,sBAAsB;AACtB,8BAA8B;AAE9B,wCAAwC;AAExC,yBAAyB;AACzB,0BAA0B;AAC1B,iCAAiC;AAEjC,eAAe;AACf,kBAAkB;AAClB,mBAAmB;AACnB,iBAAiB;AAEjB,4DAA4D;AAC5D,wBAAwB;AACxB,0BAA0B;AAC1B,sBAAsB;AACtB,MAAM;AAEN,IAAI;AAEJ,iCAAiC;AACjC,6BAA6B;AAC7B,yBAAyB;AAEzB,mGAAmG;AACnG,+BAA+B;AAC/B,8BAA8B;AAC9B,sCAAsC;AACtC,MAAM;AACN,IAAI;AAEJ,8CAA8C;AAC9C,iEAAiE;AAEjE,oBAAoB;AACpB,yBAAyB;AAGzB,8CAA8C;AAC9C,0GAA0G;AAC1G,iCAAiC;AACjC,kBAAkB;AAClB,4DAA4D;AAE5D,sBAAsB;AACtB,wBAAwB;AACxB,MAAM;AACN,IAAI;AAEJ,iCAAiC;AACjC,yBAAyB;AACzB,wBAAwB;AACxB,MAAM;AACN,IAAI;AAEJ,yCAAyC;AACzC,uDAAuD;AAEvD,6CAA6C;AAC7C,2CAA2C;AAE3C,8BAA8B;AAC9B,sCAAsC;AAGtC,uBAAuB;AACvB,oBAAoB;AAGpB,MAAM;IAGJ,YAAY,AAAQ,IAAY,CAAE;aAAd,OAAA;IAAe;IAE5B,UAAS;QACd,OAAO,IAAI,CAAC,IAAI;IAClB;IAEA,IAAW,IAAI,GAAW,EAAE;QAC3B,IAAG,MAAM,OAAO,MAAM,GACpB,MAAM,IAAI,MAAM;QAEjB,IAAI,CAAC,IAAI,GAAG;IACd;AACF","sources":["src/classesAndInheritance.ts"],"sourcesContent":["\n\n// let personObject = {\n\n//   name: \"John\",\n//   email: 'john@doe.ca',\n//   greet: console.log('Hello')\n\n// }\n\n// class PersonClass {\n//   name: string;\n//   email: string;\n\n\n//   //constructor function helps you set up or create objects based on a\n//     //class by giving them initial values or instructions.\n\n//   constructor(name: string, email: string) {\n//     this.name = name;\n//     this.email = email;\n//   }\n\n//   greet() {\n//     return `Hello ${this.name}`\n//   }\n\n// }\n\n// const person = new PersonClass( 'John', 'email');\n// console.log(person)\n// console.log(person.greet())\n\n// // const person2 = new PersonClass();\n\n// // console.log(person)\n// // console.log(person2)\n// // console.log(person.greet())\n\n// class User {\n//   name: string;\n//   email: string;\n//   age: number;\n\n//   constructor(name: string, email: string, age: number) {\n//     this.name = name;\n//     this.email = email;\n//     this.age = age;\n//   }\n\n// }\n\n// class AdminUser extends User {\n//   isAdmin: boolean = true;\n//   usersReport: number;\n\n//   constructor(name: string, email: string, age: number, isAdmin: boolean, usersReport: number) {\n//     super(name, email, age);\n//     this.isAdmin = isAdmin;\n//     this.usersReport = usersReport;\n//   }\n// }\n\n// const user = new User('Johnny', 'bah', 99);\n// const adminUser = new AdminUser('Oak', 'doe', 99, true, 1000);\n\n// console.log(user)\n// console.log(adminUser)\n\n\n// // Using shorthand for constructor function\n// // By declaring a constructor with a public name and age, we can skip declaring porperties in the class\n// // below is the same as above.\n// class Person2 {\n//   constructor(public name: string, public age: number) {}\n\n//   public getName(){\n//     return this.name;\n//   }\n// }\n\n// class Admin2 extends Person2 {\n//   public returnName(){\n//     return this.name;\n//   }\n// }\n\n// let jeff = new Person2('Jeffory', 99);\n// let adminJeff = new Admin2('Jeffory the admin', 99);\n\n// const person3 = new Person2('John', 9999);\n// const mark = new Person2('Mark', -9999);\n\n// console.log(jeff.getName())\n// console.log(adminJeff.returnName())\n\n\n// console.log(person3)\n// console.log(mark)\n\n\nclass PersonClass {\n  private _age: number | undefined;\n\n  constructor(private name: string) {}\n\n  public getName(){\n    return this.name;\n  }\n\n  public set age(age: number) {\n   if(age > 200 || age < 0) {\n     throw new Error('Invalid age')\n   }\n    this._age = age;\n  }\n}\n"],"names":[],"version":3,"file":"index.8ee6fc29.js.map","sourceRoot":"../"}