{"mappings":"AAEA,IAAI,eAAe;IAEjB,MAAM;IACN,OAAO;IACP,OAAO,QAAQ,GAAG,CAAC;AAErB;AAEA,MAAM;IAKJ,oEAAoE;IAClE,sDAAsD;IAExD,YAAY,IAAY,EAAE,KAAa,CAAE;QACvC,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,KAAK,GAAG;IACf;IAEA,QAAQ;QACN,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7B;AAEF;AAEA,MAAM,SAAS,IAAI,YAAa,QAAQ;AACxC,QAAQ,GAAG,CAAC;AACZ,QAAQ,GAAG,CAAC,OAAO,KAAK;AAExB,qCAAqC;AAErC,sBAAsB;AACtB,uBAAuB;AACvB,8BAA8B;AAE9B,MAAM;IAKJ,YAAY,IAAY,EAAE,KAAa,EAAE,GAAW,CAAE;QACpD,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,GAAG,GAAG;IACb;AAEF;AAEA,MAAM,kBAAkB;IAItB,YAAY,IAAY,EAAE,KAAa,EAAE,GAAW,EAAE,OAAgB,EAAE,WAAmB,CAAE;QAC3F,KAAK,CAAC,MAAM,OAAO;aAJrB,UAAmB;QAKjB,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,WAAW,GAAG;IACrB;AACF;AAEA,MAAM,OAAO,IAAI,KAAK,UAAU,OAAO;AACvC,MAAM,YAAY,IAAI,UAAU,OAAO,OAAO,IAAI,MAAM;AAExD,QAAQ,GAAG,CAAC;AACZ,QAAQ,GAAG,CAAC;AAGZ,2CAA2C;AAC3C,uGAAuG;AACvG,8BAA8B;AAC9B,MAAM;IACJ,YAAY,AAAO,IAAY,EAAE,AAAO,GAAW,CAAE;aAAlC,OAAA;aAAqB,MAAA;IAAc;IAE/C,UAAS;QACd,OAAO,IAAI,CAAC,IAAI;IAClB;AACF;AAEA,MAAM,eAAe;IACZ,aAAY;QACjB,OAAO,IAAI,CAAC,IAAI;IAClB;AACF;AAEA,IAAI,OAAO,IAAI,QAAQ,WAAW;AAClC,IAAI,YAAY,IAAI,OAAO,qBAAqB;AAEhD,QAAQ,GAAG,CAAC,KAAK,OAAO;AACxB,QAAQ,GAAG,CAAC,UAAU,UAAU","sources":["src/classesAndInheritance.ts"],"sourcesContent":["\n\nlet personObject = {\n\n  name: \"John\",\n  email: 'john@doe.ca',\n  greet: console.log('Hello')\n\n}\n\nclass PersonClass {\n  name: string;\n  email: string;\n\n\n  //constructor function helps you set up or create objects based on a\n    //class by giving them initial values or instructions.\n\n  constructor(name: string, email: string) {\n    this.name = name;\n    this.email = email;\n  }\n\n  greet() {\n    return `Hello ${this.name}`\n  }\n\n}\n\nconst person = new PersonClass( 'John', 'email');\nconsole.log(person)\nconsole.log(person.greet())\n\n// const person2 = new PersonClass();\n\n// console.log(person)\n// console.log(person2)\n// console.log(person.greet())\n\nclass User {\n  name: string;\n  email: string;\n  age: number;\n\n  constructor(name: string, email: string, age: number) {\n    this.name = name;\n    this.email = email;\n    this.age = age;\n  }\n\n}\n\nclass AdminUser extends User {\n  isAdmin: boolean = true;\n  usersReport: number;\n\n  constructor(name: string, email: string, age: number, isAdmin: boolean, usersReport: number) {\n    super(name, email, age);\n    this.isAdmin = isAdmin;\n    this.usersReport = usersReport;\n  }\n}\n\nconst user = new User('Johnny', 'bah', 99);\nconst adminUser = new AdminUser('Oak', 'doe', 99, true, 1000);\n\nconsole.log(user)\nconsole.log(adminUser)\n\n\n// Using shorthand for constructor function\n// By declaring a constructor with a public name and age, we can skip declaring porperties in the class\n// below is the same as above.\nclass Person2 {\n  constructor(public name: string, public age: number) {}\n\n  public getName(){\n    return this.name;\n  }\n}\n\nclass Admin2 extends Person2 {\n  public returnName(){\n    return this.name;\n  }\n}\n\nlet jeff = new Person2('Jeffory', 99);\nlet adminJeff = new Admin2('Jeffory the admin', 99);\n\nconsole.log(jeff.getName())\nconsole.log(adminJeff.returnName())\n"],"names":[],"version":3,"file":"index.8ee6fc29.js.map","sourceRoot":"../"}