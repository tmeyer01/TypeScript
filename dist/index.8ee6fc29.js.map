{"mappings":"AAEA,IAAI,eAAe;IAEjB,MAAM;IACN,OAAO;IACP,OAAO,QAAQ,GAAG,CAAC;AAErB;AAEA,MAAM;IAKJ,oEAAoE;IAClE,sDAAsD;IAExD,YAAY,IAAY,EAAE,KAAa,CAAE;aAPzC,OAAO;aACP,QAAQ;QAON,QAAQ,GAAG,CAAC,UAAW;QACvB,QAAQ,GAAG,CAAC,WAAY;IAC1B;IAEA,QAAQ;QACN,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7B;AAEF;AAEA,MAAM,SAAS,IAAI,YAAa,QAAQ;AACxC,QAAQ,GAAG,CAAC;AACZ,QAAQ,GAAG,CAAC,OAAO,KAAK,IAExB,qCAAqC;CAErC,sBAAsB;CACtB,uBAAuB;CACvB,8BAA8B","sources":["src/classesAndInheritance.ts"],"sourcesContent":["\n\nlet personObject = {\n\n  name: \"John\",\n  email: 'john@doe.ca',\n  greet: console.log('Hello')\n\n}\n\nclass PersonClass {\n  name = \"John\";\n  email = 'johnsemail@email.com';\n\n\n  //constructor function helps you set up or create objects based on a\n    //class by giving them initial values or instructions.\n\n  constructor(name: string, email: string) {\n    console.log(\"name: \",  name)\n    console.log(\"email: \",  email)\n  }\n\n  greet() {\n    return `Hello ${this.name}`\n  }\n\n}\n\nconst person = new PersonClass( 'John', 'email');\nconsole.log(person)\nconsole.log(person.greet())\n\n// const person2 = new PersonClass();\n\n// console.log(person)\n// console.log(person2)\n// console.log(person.greet())\n"],"names":[],"version":3,"file":"index.8ee6fc29.js.map","sourceRoot":"/__parcel_source_root/"}