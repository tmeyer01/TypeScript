{"mappings":"AAAA,qDAAqD;AASrD,MAAM,SAAiB,CAAC,OAAc;IACpC,IAAI,UAAiB,EAAE;IACvB,IAAI,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAI;QACnC,IAAI,OAAO,KAAK,CAAC,EAAE;QACnB,IAAG,EAAE,KAAK,CAAC,EAAE,GACX,QAAQ,IAAI,CAAC,KAAK,CAAC,EAAE;IAEzB;IACA,OAAO;AACT;AAEA,IAAI,WAAW;IAAC;IAAE;IAAE;IAAE;IAAE;IAAE;IAAE;IAAE;IAAE;IAAE;CAAG;AAErC,MAAM,mBAAmB,CAAC;IACxB,OAAO,OAAO;AAChB;AAEA,IAAI,UAAU;IAAC;IAAO;IAAO;IAAO;CAAM;AAC1C,MAAM,aAAa,CAAC;IAClB,OAAO,SAAS;AAClB;AAqBA,MAAM,UAAsB,CAAC,OAAc;IACzC,IAAI,UAAiB,EAAE;IAEvB,IAAI,MAAM,MAAM,KAAK,GAAG;QACtB,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,MAAM,EAAE,IAAK;YACrC,IAAI,OAAO,KAAK,CAAC,EAAE;YACnB,QAAQ,IAAI,CAAC,EAAE;QACjB;QACA,OAAO;IACT;IACA,OAAO,EAAE;AACX;AAGA,MAAM,mBAAmB,CAAC;IACxB,OAAO,OAAQ,CAAC,CAAC,EAAE,KAAK,CAAC;AAC3B;AAEA,MAAM,aAAa,CAAC;IAClB,OAAO,OAAO;AAChB;AAEA,MAAM,iBAAiB,CAAC;IACtB,OAAO,KAAK,QAAQ;AACtB;AAEA,QAAQ,GAAG,CAAC,8BAA8B,QAAQ,UAAU;AAC5D,QAAQ,GAAG,CAAC,uBAAuB,QAAQ,SAAS;AACpD,QAAQ,GAAG,CAAC,qBAAqB,QAAQ,UAAU","sources":["src/genericsPractice.ts"],"sourcesContent":["// moving away from concrete types and using generics\n\ntype Filter = {\n  <T>(\n    array: T[],\n    f: (item: T) => boolean\n  ): T[];\n}\n\nconst filter: Filter = (array: any[], f: Function) => {\n  let results: any[] = [];\n  for(let i = 0; i < array.length; i++){\n    let item = array[i];\n    if(f(array[i])){\n      results.push(array[i])\n    }\n  }\n  return results;\n}\n\nlet numbers2 = [1,2,3,4,5,6,7,8,9,10]\n\nconst greaterThanSeven = (item: number) =>{\n  return item < 7\n}\n\nlet strings = [\"cat\", \"bat\", \"rat\", \"mat\"];\nconst filterCats = (item: string) => {\n  return item === \"cat\";\n}\n\n// console.log(filter(numbers2, greaterThanSeven));\n// console.log(filter(strings, filterCats));\n\n// where can generics be used?\n// after a type\n\n\n\ntype genericMap = {\n  <T, U>(\n    array: T[],\n    f: (item: T) => U\n  ): U[];\n}\n\n\n\n\n\nconst mapping: genericMap = (array: any[], f: Function) => {\n  let results: any[] = [];\n\n  if (array.length !== 0) {\n    for (let i = 0; i < array.length; i++) {\n      let item = array[i];\n      results.push(f(item));\n    }\n    return results;\n  }\n  return [];\n}\n\n\nconst addAnotherAnimal = (item: string) => {\n  return item +  ` ${item}`\n}\n\nconst timesBytwo = (item: number) => {\n  return item * 2\n}\n\nconst covertToString = (item: number) => {\n  return item.toString()\n}\n\nconsole.log('Times array by two results', mapping(numbers2, timesBytwo));\nconsole.log('Adds another animal', mapping(strings, addAnotherAnimal));\nconsole.log('Coverts to string', mapping(numbers2, covertToString));\n"],"names":[],"version":3,"file":"index.390de4a4.js.map","sourceRoot":"../"}