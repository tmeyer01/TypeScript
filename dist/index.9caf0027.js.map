{"mappings":"AAAA,+BAA+B;AAE/B,MAAM,QAAQ,CAAC,MAAc;IAC3B,OAAO,CAAC,iBAAiB,EAAE,KAAK,UAAU,EAAE,IAAI,UAAU,CAAC;AAC7D;AAEA,QAAQ,GAAG,CAAC,MAAM,QAAQ;AAE1B,gGAAgG;AAGhG,sBAAsB;AAEtB,MAAM,SAAS,CAAC,MAAc;IAE5B,IAAI,KACF,OAAO,CAAC,iBAAiB,EAAE,KAAK,6BAA6B,CAAC;IAEhE,OAAO,CAAC,iBAAiB,EAAE,KAAK,UAAU,EAAE,IAAI,UAAU,CAAC;AAC7D;AAEA,QAAQ,GAAG,CAAC,OAAO;AACnB,QAAQ,GAAG,CAAC,OAAO,QAAQ;;AAE3B,gHAAgH;AAGhH,qCAAqC;UAEhC;;;GAAA,YAAA;AAYL,MAAM,UAAkB;IACtB,MAAM;IACN,KAAK;IACL,OAAO;IACP,SAAS;AACX;AAEA,MAAM,oBAAoB,CAAC;IAEzB,OAAO,GAAG,GAAG,OAAO,GAAG,GAAG;IAC1B,OAAO,OAAO;IAEd,OAAO;AACT;AAEA,QAAQ,GAAG,CAAC,kBAAkB;AAgB9B,MAAM,UAA8B;IAClC,MAAM;IACN,KAAK;IACL,OAAO;IACP,SAAS;IACT,OAAM,QAAgB;QACpB,OAAO,CAAC,EAAE,SAAS,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC;IAC7E;AACF;AAGA,QAAQ,GAAG,CAAC,QAAQ,KAAK,CAAC;AAC1B,QAAQ,GAAG,CAAC,QAAQ,KAAK,CAAC;AA2B1B,MAAM,UAAmB,CACvB,eACA,2BACA,4BACA;IAEA,IAAK,qCAAqC,QAAQ,aAChD,OAAO;QACP,eAAe;QACf,YAAY;QACZ,eAAe;QACf,aAAa;IACb;SAEK,IAAI,OAAO,8BAA8B,UAC9C,OAAO;QACL,eAAe;QACf,eAAe;QACf,aAAa;IACf;IAEF,MAAM,IAAI,MAAM;AAClB;AAKA,QAAQ,GAAG,CAAC,QAAQ,IAAI,QAAQ,IAAI,QAAQ,UAAU;AACtD,QAAQ,GAAG,CAAC,QAAQ,IAAI,QAAQ,YAAY","sources":["src/functionsPractice.ts"],"sourcesContent":["//Declaring type safe functions\n\nconst intro = (name: string, age: number):string => {\n  return `Hello my name is ${name} and I am ${age} years old`\n}\n\nconsole.log(intro('John', 25))\n\n// save as java script except you need to declare the type of the parameters and the return type\n\n\n// Optional Parameters\n\nconst intro2 = (name: string, age?: number):string => {\n\n  if (age){\n    return `Hello my name is ${name} and I dont know how old I am`\n  }\n  return `Hello my name is ${name} and I am ${age} years old`\n}\n\nconsole.log(intro2('John'))\nconsole.log(intro2('John', 98))\n\n// Much like Optional types, you can make parameters optional by adding a question mark after the parameter name\n\n\n// Custom Parameters and Return Types\n\nenum AgeUnit {\n  years = \"years\",\n  months = \"months\",\n}\n\ntype Person = {\n  name: string;\n  age: number;\n  ageUnit: AgeUnit;\n  country: string;\n}\n\nconst person1: Person = {\n  name: 'John',\n  age: 25,\n  ageUnit: AgeUnit.years,\n  country: 'USA'\n};\n\nconst covertAgeToMonths = (person: Person): Person => {\n\n  person.age = person.age * 12;\n  person.ageUnit = AgeUnit.months;\n\n  return person;\n}\n\nconsole.log(covertAgeToMonths(person1))\n// Thuis returns {name: 'John', age: 300, ageUnit: 'months', country: 'USA'}\n\n\n// Function Call Signatures\n\ntype greetingFunction = (greeting: string) => string;\n\ntype PersonWithFunction = {\n  name: string;\n  age: number;\n  ageUnit: AgeUnit;\n  country: string;\n  greet: greetingFunction\n}\n\nconst person2: PersonWithFunction = {\n  name: 'John',\n  age: 25,\n  ageUnit: AgeUnit.years,\n  country: 'USA',\n  greet(greeting: string): string {\n    return `${greeting} my name is ${this.name} and I am ${this.age} years old`\n  }\n};\n\n\nconsole.log(person2.greet('Hello'))\nconsole.log(person2.greet('Good Afternoon'))\n\n//Function overloading\n\ntype Reservation = {\n  departureDate: Date;\n  returnDate?: Date;\n  departingFrom: string;\n  destination: string;\n}\n\n\n\ntype Reserve = {\n  (\n  departureDate: Date,\n  returningDate: Date,\n  departingFrom: string,\n  destination: string\n  ) : Reservation| never;\n  (\n    departureDate: Date,\n    departingFrom: string,\n    destination: string\n  ) : | Reservation | never;\n};\n\nconst reserve: Reserve = (\n  departureDate: Date,\n  returnDateOrDepartingFrom: Date | string,\n  departingFromOrDestination: string,\n  destination?: string\n) => {\n  if ( returnDateOrDepartingFrom instanceof Date && destination){\n    return {\n    departureDate: departureDate,\n    returnDate: returnDateOrDepartingFrom,\n    departingFrom: departingFromOrDestination,\n    destination: destination\n    };\n\n  } else if (typeof returnDateOrDepartingFrom === 'string'){\n    return {\n      departureDate: departureDate,\n      departingFrom: departingFromOrDestination,\n      destination: departingFromOrDestination\n    }\n  }\n  throw new Error('Invalid details provided')\n};\n\n\n\n\nconsole.log(reserve(new Date(), new Date(), 'London', 'Paris'))\nconsole.log(reserve(new Date(), \"New York\", \"Washington\"));\n\n\n\n\n\n\n"],"names":[],"version":3,"file":"index.9caf0027.js.map","sourceRoot":"/__parcel_source_root/"}