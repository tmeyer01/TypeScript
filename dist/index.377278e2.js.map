{"mappings":"AAAA,QAAQ,GAAG,CAAC;AAEZ,IAAI,SAAiB;AAErB,QAAQ,GAAG,CAAC,OAAO,MAAM;AAGzB,+CAA+C;AAE/C,IAAI,YAAiB;AACrB,YAAY;AACZ,QAAQ,GAAG,CAAC;AAEZ,SAAS;AAET,IAAI,eAAwB;AAE5B,aAAa;AAEb,eAAe;AAEf,QAAQ,GAAG,CAAC;AAEZ,eAAe;AAEf,QAAQ,GAAG,CAAC;AAEZ,aAAa;AAEb,IAAI,MAAc;AAElB,MAAK;AACL;AACA,MAAM,QAAc;AACpB,MAAM,SAAS;AACf,QAAQ,GAAG,CAAC;AAEZ,QAAQ;AACR,IAAI,UAAU,OAAO;AACrB,QAAQ,GAAG,CAAC;AAGZ,MAAM,aAAa;AAEnB,IAAI,cAAc;AAElB,cAAc,aAAa;AAE3B,QAAQ,GAAG,CAAC;AAEZ,QAAQ,GAAG,CAAC,OAAO;AAGnB,QAAQ;AAER,MAAM,MAGF;IACF,OAAO;IACP,OAAO;AACT;AAEA,QAAQ,GAAG,CAAC;AAiBZ,MAAM,YAAsB;IAC1B,OAAO;IACP,cAAc;IACd,iBAAiB,IAAI;IACrB,eAAe,IAAI;IACnB,SAAS;QACP,MAAM;QACN,SAAS;QACT,aAAa;IACf;AACF;AAEA,QAAQ,GAAG,CAAC;AAqBZ,MAAM,eAA6B;IACjC,MAAM;IACN,KAAK;IACL,OAAO;IACP,OAAO;IACP,OAAO;AACT;AAMA,MAAM,oBAAoB,CAAC,GAAmB;IAE5C,IAAG,OAAO,MAAM,YAAY,OAAO,MAAM,UACvC,OAAO,IAAI;IAGb,OAAO,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;AAIpB;AAIA,QAAQ,GAAG,CAAC,6BAA4B,kBAAkB,GAAE;AAC5D,QAAQ,GAAG,CAAC,OAAM,kBAAkB,WAAW;AAC/C,QAAQ,GAAG,CAAC,OAAM,kBAAkB,KAAK;AAiBzC,MAAM,iBAA6B;IACjC,MAAM;IACN,QAAQ;IACR,UAAU;QACR,OAAO;QACP,OAAO;QACP,MAAM;QACN,OAAO;IACT;AACF;AAEA,MAAM,kBAA8B;IAClC,MAAM;IACN,QAAQ;IACR,UAAU;QACR,MAAM;IACR;AACF;AAQA,QAAQ;AACR,sEAAsE;AACtE,4CAA4C;AAC5C,IAAI,IAAyB;IAAC;IAAE;IAAG;IAAK;CAAI;AAI5C,MAAM,YAAsB;IAC1B;QACE,OAAO;QACP,cAAc;QACd,iBAAiB,IAAI;QACrB,eAAe,IAAI;QACnB,SAAS;YACP,MAAM;YACN,SAAS;YACT,aAAa;QACf;IACF;IACA;QACE,OAAO;QACP,cAAc;QACd,iBAAiB,IAAI;QACrB,eAAe,IAAI;QACnB,SAAS;YACP,MAAM;YACN,SAAS;YACT,aAAa;QACf;IACF;CACD;AAGD,QAAQ;AAER,IAAI;AAIJ,MAAM,wBAAwC;IAAC;IAAG;IAAM;IAAQ;IAAS;CAAO;AAEhF,QAAQ,GAAG,CAAC;AAEZ,gCAAgC;AAEhC,IAAI,UAA6B;IAAC;IAAE;IAAE;IAAE;IAAE;CAAE;AAE5C,QAAQ,GAAG,CAAC;AAEZ,kBAAkB;AAGlB,2DAA2D;AAC3D,MAAM,aAAa;IACjB,QAAQ,GAAG,CAAC;AACd;AAEA,aAEA,sFAAsF","sources":["src/index.ts"],"sourcesContent":["console.log('Hello World today')\n\nlet myName: string = 'John'\n\nconsole.log(myName.length)\n\n\n//Anytype -> any type of data || avoid using it\n\nlet firstName: any = 'John'\nfirstName = 10;\nconsole.log(firstName)\n\n//Boolean\n\nlet booleanValue: boolean = true;\n\n//Litervalues\n\nbooleanValue = false;\n\nconsole.log(booleanValue)\n\nbooleanValue = typeof \"John\" === \"string\";\n\nconsole.log(booleanValue)\n\n//Number type\n\nlet num: number = 10;\n\nnum= 10.5;\nnum -3000;\nnum = Infinity * .01;\nnum = parseInt('100')\nconsole.log(num)\n\n//BigInt\nlet bigInt1 = BigInt(93232)\nconsole.log(bigInt1)\n\n\nconst helloWorld = 99;\n\nlet helloWorld2 = \"Hello World\";\n\nhelloWorld2 = helloWorld + helloWorld2\n\nconsole.log(helloWorld2)\n\nconsole.log(typeof helloWorld2)\n\n\n//Object\n\nconst car:{\n  color: string;\n  brand: string;\n} = {\n  color: 'red',\n  brand: 'Ford'\n}\n\nconsole.log(car)\n\n\ntype Airplane = {\n  model: string;\n  flightNumber: string;\n  timeOfDeparture: Date;\n  timeOfArrival: Date;\n  caterer: Caterer\n}\n\ntype Caterer = {\n  name: string;\n  address: string;\n  phoneNumber: number;\n}\n\nconst airplane1: Airplane = {\n  model: 'Boeing 737',\n  flightNumber: 'AA123',\n  timeOfDeparture: new Date,\n  timeOfArrival: new Date,\n  caterer: {\n    name: 'John',\n    address: '123 Main Street',\n    phoneNumber: 5552323232\n  }\n}\n\nconsole.log(airplane1)\n\n// Union Types\n// Advantages of union types is that you can combine different types of data into one type\n\ntype Dog = {\n  name: string;\n  age: number;\n  barks: boolean;\n  breed: string;\n}\n\ntype Cat = {\n  name: string;\n  age: number;\n  meows: boolean;\n  breed: string;\n}\n\ntype HybridAnimal = Dog | Cat;\n\nconst mashUpAnimal: HybridAnimal = {\n  name: 'Fido',\n  age: 10,\n  barks: true,\n  meows: true,\n  breed: 'Mixed'\n}\n\n\n// Union Types with primtive types\ntype NumberOrString = number | string;\n\nconst addNumberOrString = (a: NumberOrString, b: NumberOrString ) => {\n\n  if(typeof a === 'number' && typeof b === 'number'){\n    return a + b;\n\n  }\n  return `${a} ${b}`\n\n\n\n}\n\n\n\nconsole.log('TESTING addNumberOrString',addNumberOrString(1,2))\nconsole.log('-->',addNumberOrString(\"this is\", \" working\"))\nconsole.log('-->',addNumberOrString(100, \" working\"))\n\n\n// Intersection Types are like union types but they combine the properties of the types and need all the properties to be present\n\n// Index signatures\n\ntype TallPerson = {\n  name: string;\n  height: number;\n  Clothing: Clothing;\n}\n\ntype Clothing = {\n  [clothing : string]: string | boolean;\n};\n\nconst jeffTallPerson: TallPerson = {\n  name: 'Jeff',\n  height: 6.2,\n  Clothing: {\n    shirt: true,\n    pants: 'blue',\n    belt: false,\n    shoes: 'nike'\n  }\n}\n\nconst sarahTallPerson: TallPerson = {\n  name: 'Sarah',\n  height: 5.8,\n  Clothing: {\n    none: true\n  }\n}\n\ntype MixedIndexedObject = {\n  [key: string]: number;\n  // [index: number]: string | number;\n};\n\n\n//Arrays\n// Below uses a union to allow for multiple types of data in the array\n// not typically used as more room for erros\nlet c: (number | string)[] = [1,2, \"3\", \"4\"]\n\ntype Airplaes = Airplane[];\n\nconst airplanes: Airplaes = [\n  {\n    model: 'Boeing 737',\n    flightNumber: 'AA123',\n    timeOfDeparture: new Date,\n    timeOfArrival: new Date,\n    caterer: {\n      name: 'John',\n      address: '123 Main Street',\n      phoneNumber: 5552323232\n    }\n  },\n  {\n    model: 'Boeing 737',\n    flightNumber: 'AA123',\n    timeOfDeparture: new Date,\n    timeOfArrival: new Date,\n    caterer: {\n      name: 'John',\n      address: '123 Main Street',\n      phoneNumber: 5552323232\n    }\n  }\n]\n\n\n//Tuples\n\nlet person: [string, string, number?]\n\ntype ListOfStudents = [ number, boolean, ...string[]];\n\nconst listOfPassingStudents: ListOfStudents = [3, true, 'John', 'Sarah', 'Jeff']\n\nconsole.log(listOfPassingStudents)\n\n//TypeScript has readonly arrays\n\nlet numbers: readonly number[] = [1,2,3,4,5]\n\nconsole.log(numbers)\n\n// numbers.push(6)\n\n\n//void function is a function that does not return anything\nconst addnumbers = (): void =>{\n  console.log(2+4)\n}\n\naddnumbers()\n\n//void function doesnt return anything but a never function will never return anything\n"],"names":[],"version":3,"file":"index.377278e2.js.map","sourceRoot":"/__parcel_source_root/"}